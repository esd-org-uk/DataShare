@model DS.Domain.DataSetSchema
@{
    ViewBag.Title = "Edit schema - Admin - DataShare";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutPage.cshtml";
}

@section TitleContent
{
    Edit schema
}


@using (Html.BeginForm("Edit", "Schema", null, FormMethod.Post, new {id="form1"} ))
{
    
<div class="container_16">
    <p class="grid_16 intro">Change existing schema details, and edit fields contained in this schema using the options below.</p>
    <div id="Steps" class="grid_16">        
        @Html.Raw(ViewBag.Message)
     
        <input type="submit" style="display:none" class="small button blue float_right" id="TopSave" value="Finish" />
        <ul><li class="tab" id="li-step-1"><a href="#step-1">Step 1 - Schema detail</a></li>
            <li class="tab" id="li-step-2"><a href="#step-2">Step 2 - Classification</a></li>
            @{if (!Model.IsExternalData)
              {
                  <li class="tab" id="li-step-3"><a href="#step-3">Step 3 - Fields</a></li>
              }
            }
              
        </ul>
           
        <div id="step-1">
            

            


            <input type="hidden" id="categoryName" name="categoryName" value="@ViewBag.CategoryName" />
            <input type="hidden" id="schemaName" name="schemaName" value="@Model.FriendlyUrl" />
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.IsExternalData)
            @Html.ValidationSummary(true, "Unable to update schema, please correct the following:")
            
                
                @Html.ValidationMessageFor(model => model.Title)
                <div class="editor-field">
                    
                    @Html.LabelFor(model => model.Title)

                @{
    if (Convert.ToBoolean(Model.IsStandardisedSchemaUrl))
    {
        @Html.TextBoxFor(model => model.Title, new {@readonly ="readonly", @class="text-box" , style="margin-left:175px;"});
    }
    else
    {
        @Html.EditorFor(model => model.Title);
    } 
                }
                    <span class="helptext">The title to display for this schema.</span>
                </div>

                @Html.ValidationMessageFor(model => model.ShortDescription)
                <div class="editor-field">
                    
                    @Html.LabelFor(model => model.ShortDescription)
                @Html.TextAreaFor(model => model.ShortDescription, new { @class = "text-box multi-line short" })
                    <span class="helptext">A brief description of this schema (Max 500 characters).</span>
                    
                </div>

                @Html.ValidationMessageFor(model => model.Description)
                <div class="editor-field">
                    
                    @Html.LabelFor(model => model.Description)
                    @Html.TextAreaFor(model => model.Description, new { @class = "text-box multi-line mceEditor" })                        
                </div>

                @Html.ValidationMessageFor(model => model.IsFeatured)
                <div class="editor-field">                    
                    @Html.LabelFor(model => model.IsFeatured)
                    @Html.EditorFor(model => model.IsFeatured)
                    <span class="helptext">Tick this box to make this schema appear on the home page as a featured item.</span>
                </div>

                @Html.ValidationMessageFor(model => model.UploadFrequency)
                <div class="editor-field">
                    
                    @Html.LabelFor(model => model.UploadFrequency)
                    @Html.DropDownListFor(model => model.UploadFrequency, new[] { new SelectListItem { Text = "Ad-hoc", Value = "0" }, new SelectListItem { Text = "Weekly", Value = "7" }, new SelectListItem { Text = "Monthly", Value = "30" }, new SelectListItem { Text = "Quarterly", Value = "92" }, new SelectListItem { Text = "Annually", Value = "365" } })
                    <span class="helptext">How often this schema should have new datasets uploaded into it.</span>
                </div>
                <div class="editor-field talllabel">                    
                    @Html.LabelFor(model => model.IsAllDataOverwittenOnUpload)
                    @Html.EditorFor(model => model.IsAllDataOverwittenOnUpload)
                    <span class="helptext">Tick this box to overwrite all data every time a csv is uploaded.</span>
                </div>
                       
            <div id="EmailHolder" class="editor-field hidden">
                @Html.ValidationMessageFor(model => model.OwnerEmail)
                @Html.LabelFor(model => model.OwnerEmail)
                @Html.EditorFor(model => model.OwnerEmail)
                <span class="helptext">The email address to be notified when updates are due.</span>
            </div>
            
            <div class="editor-field">
                <span style="width:175px;font-weight:bold;font-size:108%;color:#666;zoom:1;position:absolute;top:0">Watched Folder ID:</span>
                <span style="margin-left:175px;">@Html.DisplayFor(model => model.Id)</span>
            </div>
             
            
            <div class="right">
                @{if (Model.IsExternalData)
                {
                      <input type="submit" class="large button blue" value="Finish"  />
                  }
                else
                {
                    <input type="submit" id="Next" class="blue button submit" value="Next" />
                }}
            </div>
                @if (!String.IsNullOrEmpty(Model.SchemaDefinitionFromUrl))
                {
                    <div class="editor-field">
                        <label></label>
                        <label >Schema imported from</label>
                        <div style="margin-left: 175px">
                            @Model.SchemaDefinitionFromUrl
        </div>

                    </div>
                }
        </div>

        <div id="step-2">
            <p class="information">Classify the schema using one or more esd defined functions or services. For more information please see <a href="http://standards.esd.org.uk/?" target="_blank">http://standards.esd.org.uk</a></p>
            <div class="editor-field" >
                @Html.LabelFor(model => model.CurrentMappedEsdFunctionService)
                @Html.ListBoxFor(model => model.CurrentMappedEsdFunctionService, new MultiSelectList(Model.CurrentMappedEsdFunctionService, "ModifiedIdentifier", "Label"), new { Multiple = "multiple" })
                <input type="button" value="-" title="remove selected classification" class="blue button" id="butRemoveMapping" name="butRemoveMapping" />
                <span class="helptext">List of esd standard functions and services this schema is classified under.</span>
            </div>
            
            <fieldset class="well esd" id="fs-add-classification">
                <legend>Add classification</legend>
                <div class="editor-field">
                    <label for="EsdFunctionsLevel1">Function</label>
                    @Html.DropDownList("EsdFunctionsLevel1", new List<SelectListItem>(), new { @class = "esd" })
                    <input type="button" value="+" title="add selected classification" class="blue button" id="butAddMapping" name="butAddMapping" />
                </div>

                <div class="editor-field" id="divEsdFunctionsLevel2">
                    <label for="EsdFunctionsLevel2">Sub-Function</label>
                    @Html.DropDownList("EsdFunctionsLevel2", new List<SelectListItem>(), new { @class = "esd" })
                    <input type="button" value="+" title="add selected classification" class="blue button" id="butAddMapping2" name="butAddMapping2" />
                </div>

                <div class="editor-field" id="divEsdServicesLevel1">
                    <label for="EsdServicesLevel1">Service</label>
                    @Html.DropDownList("EsdServicesLevel1", new List<SelectListItem>(), new { @class = "esd" })
                    <input type="button" value="+" title="add selected classification" class="blue button" id="butAddMapping3" name="butAddMapping3" />
                </div>

            </fieldset>
            <div>
                <input type="submit" id="Next2" class="blue button submit float_right" value="Next" />
                <input type="button" id="Back2" class="button" value="Prev" />                
            </div>

        </div>
            
        @{if (!Model.IsExternalData)
          {
              <div id="step-3">
                  <h3>                
                      <a id="AddColumn" href="@string.Format(@"/Admin/Schema/{0}/{1}/AddColumn", Model.Category.FriendlyUrl, Model.FriendlyUrl)" class="button green float_right">Add new field</a>
                      Fields
                  </h3>                            

                  <div id="columnData" class="clearfix">
                      @if (Model.Definition != null)
                      {  
                          <table id="DataSetColumnList" style="border: solid 1px #555; margin-bottom: 10px;">
                              <thead>
                                  <tr class="header">
                                      <th scope="col" colspan="2">Title</th>
                                      <th scope="col">Field name</th>
                                      <th scope="col">Type</th>
                                      <th scope="col">Validation</th>
                                      <th scope="col">Display</th>
                                      <th scope="col">Help text</th>
                                      <th scope="col">&nbsp;</th>
                                  </tr>
                              </thead>
                              <tbody id="rowSortable">
                                  @if (Model.Definition.Columns.Count > 0)
                                  {
                                      foreach (var column in Model.Definition.Columns)
                                      { 
                                          <tr class="@Model.Definition.Columns.IndexOf(column) % 2 == 0 ? """" : ""alt""" id="@column.Id" >
                                              <td class="dragHandle"><div>&nbsp;</div></td>
                                              <td>@column.Title</td>
                                              <td>@column.ColumnName</td>
                                              <td>@column.Type</td>
                                              <td>@Html.Raw(string.Format(@"<ul>{0}{1}{2}{3}{4}{5}{6}{7}</ul>",
                                                                          column.Type == "Text" && column.MaxSize != null && column.MaxSize > 0 ? "<li class='maximum'>Maximum size " + column.MaxSize + "</li>" : "",
                                                                          column.IsRequired ? "<li class='requiredfield'>Required</li>" : "",
                                                                          column.MinCurrency != null ? "<li class='minimum'>Minimum value: " + column.MinCurrency + "</li>" : "",
                                                                          column.MaxCurrency != null ? "<li class='maximum'>Maximum value: " + column.MaxCurrency + "</li>" : "",
                                                                          column.MinDate != null ? "<li class='minimum' class='minimum'>Minimum value: " + ((DateTime)column.MinDate).ToShortDateString() + "</li>" : "",
                                                                          column.MaxDate != null ? "<li class='maximum'>Maximum value: " + ((DateTime)column.MaxDate).ToShortDateString() + "</li>" : "",
                                                                          column.MinNumber != null ? "<li class='minimum'>Minimum value: " + column.MinNumber + "</li>" : "",
                                                                          column.MaxNumber != null ? "<li class='maximum'>Maximum value: " + column.MaxNumber + "</li>" : ""))</td>
                                              <td>@Html.Raw(string.Format(@"<ul>{0}{1}{2}</ul>", column.IsShownInitially ? "<li class='initial'>Show initially</li>" : "", column.IsTotalisable ? "<li class='totalisable'>Totalled</li>" : "", column.IsDefaultSort ? "<li class='defaultsort'>Default sorted by<li>" : ""))</td>
                                              <td>@column.HelpText</td>
                                              <td>
                                                  @Html.Raw(string.Format(@"<a href=""/Admin/Schema/{0}/{1}/{2}/EditColumn"" class=""button small blue"">Edit</a>", Model.Category.FriendlyUrl, Model.FriendlyUrl, column.ColumnName))
                                                  <a href="#" class="button small red delete">Delete</a>
                                                  <div class="deleteConfirmation"><strong>Are you sure?</strong> This will delete all associated data.<br /><a href="@Html.Raw(string.Format(@"/Admin/Schema/{0}/{1}/{2}/DeleteColumn", Model.Category.FriendlyUrl, Model.FriendlyUrl, column.ColumnName))" class="button small red">Yes</a> <a href="" class="button small grey noDelete">No</a></div>
                                              </td>
                                          </tr>
                                      }
                                  }
                              </tbody>
                          </table>
                      }
                      else 
                      {
                          <p class="information">No fields currently defined. <a href="@string.Format(@"/Admin/Schema/{0}/{1}/AddColumn", Model.Category.FriendlyUrl, Model.FriendlyUrl)" class="button green">Add new field</a></p>
                      }
                      <div>
                          <input type="submit" class="large button blue float_right" value="Finish" id="btnFinish" />
                          <input type="button" id="Back" class="button" value="Prev" />                
                      </div>
                  </div>
              </div>    
          }
        }
           
        @{
    if (!String.IsNullOrEmpty(Model.SchemaDefinitionFromUrl))
    {

        
                                <input type="radio" name="useUrl" value="yes" id="useUrlYes" checked="checked" class="hidden"/>
                        <input type="radio" name="useUrl" value="no"  id="useUrlNo" class="hidden"/>
            @Html.HiddenFor(model => model.SchemaDefinitionFromUrl)
                
    }
    else
    {
       <input type="radio" name="useUrl" value="yes" id="useUrlYes" class="hidden"/> 
        <input type="radio" name="useUrl" value="yes" id="useUrlNo" class="hidden"/> 
    }
    <input type="hidden" value="0" id="showfields" name="showfields"/>
    @Html.HiddenFor(model=> model.IsStandardisedSchemaUrl)
        }

           
    </div>

    </div>

}
@section FooterScripts {
<script src="@Url.Content("/Areas/Admin/Scripts/plugins/tiny_mce/tiny_mce.js")" type="text/javascript"></script>

<script type="text/javascript">
    var tabHolder;
    var esdFunctionsList = @Html.Raw(Json.Encode(Model.EsdFunctions));
    var esdServicesList = @Html.Raw(Json.Encode(Model.EsdServices));
        $(document).ready(function() {
            $("#rowSortable").sortable({
                start: function (event, ui) {  
                    //fix firefox position issue when dragging.  
                    if (navigator.userAgent.toLowerCase().match(/firefox/) && ui.helper !== undefined) {  
                        ui.helper.css('position', 'absolute').css('margin-top', $(window).scrollTop());  
                        //wire up event that changes the margin whenever the window scrolls.  
                        $(window).bind('scroll.sortableplaylist', function () {  
                            ui.helper.css('position', 'absolute').css('margin-top', $(window).scrollTop());  
                        });  
                    }  
                },  
                beforeStop: function (event, ui) {  
                    //undo the firefox fix.  
                    if (navigator.userAgent.toLowerCase().match(/firefox/) && ui.offset !== undefined) {  
                        $(window).unbind('scroll.sortableplaylist');  
                        ui.helper.css('margin-top', 0);  
                    }  
                },  
                helper: function (e, ui) {  
                    ui.children().each(function () {  
                        $(this).width($(this).width());  
                    });  
                    return ui;  
                },  
                scroll: true,  
                stop:function(event, ui) {
                    var obj = $.map($(this).find('tr'), function(el) {
                        return el.id + ' = ' + $(el).index();
                    });
                    //alert(obj);
                    //console.log(obj);

                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        traditional: true,
                        url: window.location.pathname.replace("Edit", "SaveSorting"),
                        data: { str: obj },
                        success: function(msg) {
                            //alert(msg);
                        }
                    });
                }
            });
        tinyMCE.init({
            // General options
            mode: "specific_textareas",
            editor_selector: "mceEditor",
            theme: "advanced",
            plugins: "advimage,inlinepopups,searchreplace,table,visualchars,xhtmlxtras",
            width: "99%",
            // Theme options
            theme_advanced_buttons1: "formatselect,bold,italic,|,justifyleft,justifycenter,justifyright,|,bullist,numlist,|,cut,copy,paste,pastetext,pasteword,|,search,replace,|,undo,redo,|,link,unlink,anchor,table,image,cleanup,code",
            theme_advanced_buttons2: "",
            theme_advanced_buttons3: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: false
        });

        //Set up tabs with transition effect
        tabHolder = $("#Steps");
        tabHolder.tabs({
                fx: { opacity: 'toggle', duration: 'fast' },
                show: function(event, ui) {
                    $('#showfields').val(ui.index);
                    if (ui.index == 1 && !$('#useUrlYes')[0].checked) {
                        $('#TopSave').fadeIn(400);
                    }
                },

        });

        //update hidden textarea when moving to next tab
            $('#Next').focus(function() {
            tinyMCE.triggerSave();
        });

        //go to second tab if showfields is passed in
            if (getParameterByName('showfields') != "") {
                tabHolder.tabs("select", parseInt(getParameterByName('showfields')));
            
                if (!isNaN(parseInt(getParameterByName('showfields')))) {
                    $('#showfields').val(parseInt(getParameterByName('showfields')));
            }
        }

            $('#Next').click(function(e) {
                //tabHolder.tabs("select", 1);
                $('#showfields').val(1);
        });
            $('#Next2').click(function(e) {
                $('#showfields').val(2);
            });
            $('#Back2').click(function(e) {
                tabHolder.tabs("select", 0);
                $('#showfields').val(0);
        });
            $('#Back').click(function(e) {
                tabHolder.tabs("select", 1);
                $('#showfields').val(1);
        });
        setupEmail($('#UploadFrequency').val());
        //set up email field show/hide
            $('#UploadFrequency').change(function() {
            setupEmail($(this).val());
        });

        function setupEmail(freq) {
            if (freq != '0') {
                $('#EmailHolder').removeClass('hidden');
            } else {
                $('#EmailHolder').addClass('hidden');
                $('#OwnerEmail').val('');
            }
        }
    });


        $(document).ready(function() {

            ResetEsdDropDowns();
            if ($('#IsStandardisedSchemaUrl').val() == "True") {
                //alert("Standardised");
                $('#fs-add-classification').hide();
                $('#step-2 .button').hide();
                UseUrlSetYes();

            } else {
                //alert("NOT Standardised");
                $('#AddColumn').show();
            }            


            $('#EsdFunctionsLevel1').change(function() {
            $('#divEsdFunctionsLevel2').hide();
            $('#divEsdServicesLevel1').hide();
            $('#EsdFunctionsLevel2').empty();
            $('#EsdServicesLevel1').empty();

            if ($('#EsdFunctionsLevel1').val() != "-1") {
                $('#EsdFunctionsLevel2').append('<option value="-1">Please select...</option>');
                    $.each(GetEsdFunctions($('#EsdFunctionsLevel1').val()), function(i, v) {
                    $('#EsdFunctionsLevel2').append('<option value=' + v.Type + v.Identifier + '>' + v.Label + '</option>');
                });

                $('#butAddMapping').show();
                $('#divEsdFunctionsLevel2').show();
                } else {
                $('#butAddMapping').hide();
            }

        });


            $('#form1').submit(function() {
            $('#CurrentMappedEsdFunctionService option').attr('selected', 'selected');

        });
            $('#butRemoveMapping').click(function() {
            $('#CurrentMappedEsdFunctionService :selected').remove();
        });

            $('#butAddMapping,#butAddMapping2,#butAddMapping3').click(function() {


                if (($("#CurrentMappedEsdFunctionService option[value='" + $('#EsdFunctionsLevel1 :selected').val() + "']").length > 0)
                    || ($("#CurrentMappedEsdFunctionService option[value='" + $('#EsdServicesLevel2 :selected').val() + "']").length > 0)
                || ($("#CurrentMappedEsdFunctionService option[value='" + $('#EsdServicesLevel1 :selected').val() + "']").length > 0)
                    ) {
                    alert("Category has already been added.");
                    return;
                };

            if ((!$('#EsdServicesLevel1').is(':hidden') || $('#EsdServicesLevel1').is(':visible')) && $('#EsdServicesLevel1').val() != "-1") {
                $('#EsdServicesLevel1 :selected').clone().appendTo($('#CurrentMappedEsdFunctionService'));
                ResetEsdDropDowns();
                return;
            }
            if ((!$('#EsdFunctionsLevel2').is(':hidden') || $('#EsdFunctionsLevel2').is(':visible')) && $('#EsdFunctionsLevel2').val() != "-1") {
                $('#EsdFunctionsLevel2 :selected').clone().appendTo($('#CurrentMappedEsdFunctionService'));
                ResetEsdDropDowns();
                return;
            }

            if ($('#EsdFunctionsLevel1 :selected').val() != "-1") {
                $('#EsdFunctionsLevel1 :selected').clone().appendTo($('#CurrentMappedEsdFunctionService'));
                ResetEsdDropDowns();
            }

        });
            $('#EsdFunctionsLevel2').change(function() {
            $('#divEsdServicesLevel1').hide();
            $('#EsdServicesLevel1').empty();

            if ($('#EsdFunctionsLevel2').val() != "-1") {
                $('#butAddMapping').hide();
                $('#butAddMapping2').show();
            } else {
                $('#butAddMapping2').hide();
                $('#butAddMapping').show();

            }
            $('#EsdServicesLevel1').append('<option value="-1">Please select...</option>');
                $.each(GetEsdServices($('#EsdFunctionsLevel2').val()), function(i, v) {
                $('#EsdServicesLevel1').append('<option value=' + v.Type + v.Identifier + '>' + v.Label + '</option>');
            });
            $('#divEsdServicesLevel1').show();
        });

            $('#divEsdServicesLevel1').change(function() {

            if ($('#EsdServicesLevel1').val() != "-1") {
                $('#butAddMapping3').show();
                $('#butAddMapping2').hide();
            } else {
                $('#butAddMapping3').hide();
                $('#butAddMapping2').show();
            }

            });

            $('#useUrlYes').click(function() {
                if ($('#useUrlYes')[0].checked) {

                    UseUrlSetYes();
                }
            });
            $('#useUrlNo').click(function() {
                if ($('#useUrlNo')[0].checked) {
                    tabHolder.tabs("select", 1);
                    UseUrlSetNo();
                }
        });

    });


        function UseUrlSetYes() {
            $('#TopSave').hide();
            $('#btnFinish').hide();
            $('#step-3 .delete').hide();
            $('#step-3 .green').hide();
            $('#btnSaveUrl').show();
        }

        function UseUrlSetNo() {
            $('#step-2 .button').show();
            $('#btnFinish').show();
            $('#fs-add-classification').show();
            $('#step-3 .delete').show();
            $('#btnSaveUrl').hide();
            $('#SchemaDefinitionFromUrl').val('');
        }

    function GetEsdServices(id) {
        var functionType = esdFunctionsList[0].Type;
            var results = esdServicesList.filter(function(element) {
            return isNaN(id) ? (functionType + element.ParentIdentifier == id) : (element.ParentIdentifier == id);
        });
        return results;
    }

    function GetEsdFunctions(id) {
            var results = esdFunctionsList.filter(function(element) {
            return isNaN(id) ? (element.Type + element.ParentIdentifier == id) : (element.ParentIdentifier == id);
        });
        return results;
    }
    
    function ResetEsdDropDowns() {
        $('#butAddMapping,#butAddMapping2,#butAddMapping3').hide();
        $('#divEsdFunctionsLevel2').hide();
        $('#divEsdServicesLevel1').hide();
        $('#EsdFunctionsLevel1').empty();


        $('#EsdFunctionsLevel1').append('<option value="-1">Please select...</option>');
            $.each(GetEsdFunctions(0), function(i, v) {
            $('#EsdFunctionsLevel1').append('<option value=' + v.Type + v.Identifier + '>' + v.Label + '</option>');
        });
    }

</script>  

}



